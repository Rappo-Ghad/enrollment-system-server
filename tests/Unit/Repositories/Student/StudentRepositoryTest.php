<?php

namespace Tests\Unit\Repositories\Student;

use App\Exceptions\ValidatorFailedException;
use App\Models\Student;
use App\Repositories\Student\StudentRepositoryInterface;
use App\Repositories\User\UserRepositoryInterface;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Tests\TestCase;

class StudentRepositoryTest extends TestCase
{
    use RefreshDatabase;

    private StudentRepositoryInterface $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(StudentRepositoryInterface::class);
    }

    /**
     * @test
     */
    public function it_should_instantiate_correct_concrete_repository_instance()
    {
        $this->assertInstanceOf(StudentRepositoryInterface::class, $this->repository);
    }

    /**
     * @test
     * @dataProvider validStudentDataProvider
     */
    public function it_should_create_new_student_if_not_exist(array $studentData)
    {
        $student = $this->repository->createStudentIfNotExist($studentData);

        $this->assertDatabaseHas('students', [
            'id' => 1,
            'school_id' => $studentData['school_id'],
            'first_name' => $studentData['first_name'],
            'middle_name' => $studentData['middle_name'],
            'last_name' => $studentData['last_name'],
            'address_line_1' => $studentData['address_line_1'],
            'address_line_2' => $studentData['address_line_2'],
            'city' => $studentData['city'],
            'province' => $studentData['province'],
            'sex' => strtolower($studentData['sex']),
            'nationality' => $studentData['nationality'],
            'guardian' => $studentData['guardian'],
            'guardian_number' => $studentData['guardian_number'],
        ]);
        $this->assertInstanceOf(Student::class, $student);
        $this->assertEquals($studentData['school_id'], $student->school_id);
        $this->assertEquals($studentData['first_name'], $student->first_name);
        $this->assertEquals($studentData['middle_name'], $student->middle_name);
        $this->assertEquals($studentData['last_name'], $student->last_name);
        $this->assertEquals($studentData['address_line_1'], $student->address_line_1);
        $this->assertEquals($studentData['address_line_2'], $student->address_line_2);
        $this->assertEquals($studentData['city'], $student->city);
        $this->assertEquals($studentData['province'], $student->province);
        $this->assertEquals(strtolower($studentData['sex']), $student->sex);
        $this->assertEquals($studentData['nationality'], $student->nationality);
        $this->assertEquals($studentData['guardian'], $student->guardian);
        $this->assertEquals($studentData['guardian_number'], $student->guardian_number);
    }

    /**
     * @test
     * @dataProvider validStudentDataProvider
     * asserts that a single student instance is created.
     */
    public function it_should_get_student_if_exist(array $studentData)
    {
        $this->repository->createStudentIfNotExist($studentData);

        $student = $this->repository->createStudentIfNotExist($studentData);

        $this->assertDatabaseMissing('students', ['id' => 2]);
        $this->assertDatabaseHas('students', [
            'id' => 1,
            'school_id' => $studentData['school_id'],
            'first_name' => $studentData['first_name'],
            'middle_name' => $studentData['middle_name'],
            'last_name' => $studentData['last_name'],
            'address_line_1' => $studentData['address_line_1'],
            'address_line_2' => $studentData['address_line_2'],
            'city' => $studentData['city'],
            'province' => $studentData['province'],
            'sex' => strtolower($studentData['sex']),
            'nationality' => $studentData['nationality'],
            'guardian' => $studentData['guardian'],
            'guardian_number' => $studentData['guardian_number'],
        ]);
        $this->assertInstanceOf(Student::class, $student);
        $this->assertEquals($studentData['school_id'], $student->school_id);
        $this->assertEquals($studentData['first_name'], $student->first_name);
        $this->assertEquals($studentData['middle_name'], $student->middle_name);
        $this->assertEquals($studentData['last_name'], $student->last_name);
        $this->assertEquals($studentData['address_line_1'], $student->address_line_1);
        $this->assertEquals($studentData['address_line_2'], $student->address_line_2);
        $this->assertEquals($studentData['city'], $student->city);
        $this->assertEquals($studentData['province'], $student->province);
        $this->assertEquals(strtolower($studentData['sex']), $student->sex);
        $this->assertEquals($studentData['nationality'], $student->nationality);
        $this->assertEquals($studentData['guardian'], $student->guardian);
        $this->assertEquals($studentData['guardian_number'], $student->guardian_number);
    }

    /**
     * @test
     * @dataProvider invalidStudentDataProvider
     */
    public function it_should_throw_exception_when_invalid_student_is_provided(array $studentData)
    {
        $thrownException = false;

        try {
            $this->repository->createStudentIfNotExist($studentData);
        } catch (ValidatorFailedException $exception) {
            $this->assertInstanceOf(ValidatorFailedException::class, $exception);
            $this->assertEquals('Failed creating the student', $exception->getMessage());
            $this->assertEquals(400, $exception->getStatusCode());

            $thrownException = true;
        }

        $this->assertTrue($thrownException);
    }

    /**
     * @test
     * @dataProvider validStudentDataProvider
     */
    public function it_should_retrieve_student_details(array $studentData)
    {
        $this->repository->createStudentIfNotExist($studentData);

        $student = $this->repository->showStudentDetails($studentData['school_id']);

        $this->assertInstanceOf(Student::class, $student);
        $this->assertEquals($studentData['school_id'], $student->school_id);
        $this->assertEquals($studentData['first_name'], $student->first_name);
        $this->assertEquals($studentData['middle_name'], $student->middle_name);
        $this->assertEquals($studentData['last_name'], $student->last_name);
        $this->assertEquals($studentData['address_line_1'], $student->address_line_1);
        $this->assertEquals($studentData['address_line_2'], $student->address_line_2);
        $this->assertEquals($studentData['city'], $student->city);
        $this->assertEquals($studentData['province'], $student->province);
        $this->assertEquals(strtolower($studentData['sex']), $student->sex);
        $this->assertEquals($studentData['nationality'], $student->nationality);
        $this->assertEquals($studentData['guardian'], $student->guardian);
        $this->assertEquals($studentData['guardian_number'], $student->guardian_number);
    }

   /**
    * @test
    */
   public function it_should_throw_an_exception_if_invalid_student_id_is_supplied()
   {
        try {
            $student = $this->repository->showStudentDetails(1);
        } catch (ModelNotFoundException $exception) {
            $this->assertInstanceOf(ModelNotFoundException::class, $exception);
            $this->assertEquals(
                "No query results for model [App\\Models\\Student].",
                $exception->getMessage()
            );
        }
   }

    /**
     * @test
     * @dataProvider validStudentsListDataProvider
     */
    public function it_should_get_all_students(array $studentsListData)
    {
        foreach ($studentsListData as $studentData) {
            $this->repository->createStudentIfNotExist($studentData);
        }

        $studentsList = $this->repository->getAllStudents();

        $this->assertInstanceOf(Collection::class, $studentsList);

        foreach ($studentsListData as $index => $studentData) {
            $this->assertEquals($studentData['school_id'], $studentsList[$index]->school_id);
            $this->assertEquals($studentData['first_name'], $studentsList[$index]->first_name);
            $this->assertEquals($studentData['middle_name'], $studentsList[$index]->middle_name);
            $this->assertEquals($studentData['last_name'], $studentsList[$index]->last_name);
            $this->assertEquals($studentData['address_line_1'], $studentsList[$index]->address_line_1);
            $this->assertEquals($studentData['address_line_2'], $studentsList[$index]->address_line_2);
            $this->assertEquals($studentData['city'], $studentsList[$index]->city);
            $this->assertEquals($studentData['province'], $studentsList[$index]->province);
            $this->assertEquals($studentData['sex'], $studentsList[$index]->sex);
            $this->assertEquals($studentData['nationality'], $studentsList[$index]->nationality);
            $this->assertEquals($studentData['guardian'], $studentsList[$index]->guardian);
            $this->assertEquals($studentData['guardian_number'], $studentsList[$index]->guardian_number);
        }
    }

    /**
     * @test
     * @dataProvider validStudentDataProvider
     */
    public function it_should_update_student_info(array $studentData, $modifiedStudentData)
    {
        $this->repository->createStudentIfNotExist($studentData);
        $this->repository->updateStudentInfo($modifiedStudentData, 1);

        $this->assertDatabaseHas('students', [
            'id' => 1,
            'school_id' => $modifiedStudentData['school_id'],
            'first_name' => $modifiedStudentData['first_name'],
            'middle_name' => $modifiedStudentData['middle_name'],
            'last_name' => $modifiedStudentData['last_name'],
            'address_line_1' => $modifiedStudentData['address_line_1'],
            'address_line_2' => $modifiedStudentData['address_line_2'],
            'city' => $modifiedStudentData['city'],
            'province' => $modifiedStudentData['province'],
            'sex' => strtolower($modifiedStudentData['sex']),
            'nationality' => $modifiedStudentData['nationality'],
            'guardian' => $modifiedStudentData['guardian'],
            'guardian_number' => $modifiedStudentData['guardian_number'],
        ]);
    }

    /**
     * @test
     * @dataProvider validStudentDataProvider
     */
    public function it_should_delete_student(array $studentData)
    {
        $student = $this->repository->createStudentIfNotExist($studentData);
        $this->assertDatabaseHas('students', [
            'id' => 1,
            'school_id' => $studentData['school_id'],
            'first_name' => $studentData['first_name'],
            'middle_name' => $studentData['middle_name'],
            'last_name' => $studentData['last_name'],
            'address_line_1' => $studentData['address_line_1'],
            'address_line_2' => $studentData['address_line_2'],
            'city' => $studentData['city'],
            'province' => $studentData['province'],
            'sex' => strtolower($studentData['sex']),
            'nationality' => $studentData['nationality'],
            'guardian' => $studentData['guardian'],
            'guardian_number' => $studentData['guardian_number'],
        ]);

        $this->repository->deleteStudent($student->id);
        $this->assertSoftDeleted($student);
    }

    public function invalidStudentDataProvider(): array
    {
        return [
            [
                [
                    'school_id' => '1',
                    'first_name' => 'There is number in first name 1',
                    'middle_name' => 'Middle',
                    'last_name' => 'Padayhag',
                    'address_line_1' => 'Address Line 1',
                    'address_line_2' => 'With Address Line 2',
                    'city' => 'Cagayan de Oro City',
                    'province' => 'Misamis Oriental',
                    'sex' => 'female',
                    'nationality' => 'Filipino',
                    'guardian' => 'Mother Name',
                    'guardian_number' => '09646839102',
                ]
            ],
            [
                [
                    'school_id' => '1',
                    'first_name' => 'Shan',
                    'middle_name' => 'There is number in middle name 1',
                    'last_name' => 'Padayhag',
                    'address_line_1' => 'Address Line 1',
                    'address_line_2' => 'With Address Line 2',
                    'city' => 'Cagayan de Oro City',
                    'province' => 'Misamis Oriental',
                    'sex' => 'female',
                    'nationality' => 'Filipino',
                    'guardian' => 'Mother Name',
                    'guardian_number' => '09646839102',
                ]
            ],
            [
                [
                    'school_id' => '1',
                    'first_name' => 'Shan',
                    'middle_name' => 'Middle',
                    'last_name' => 'There is number in last name 1',
                    'address_line_1' => 'Address Line 1',
                    'address_line_2' => 'With Address Line 2',
                    'city' => 'Cagayan de Oro City',
                    'province' => 'Misamis Oriental',
                    'sex' => 'female',
                    'nationality' => 'Filipino',
                    'guardian' => 'Mother Name',
                    'guardian_number' => '09646839102',
                ]
            ],
            [
                [
                    'school_id' => '1',
                    'first_name' => 'Shan',
                    'middle_name' => '',
                    'last_name' => 'Padayhag',
                    'address_line_1' => '',
                    'address_line_2' => '',
                    'city' => '',
                    'province' => 'Misamis Oriental',
                    'sex' => 'male',
                    'nationality' => 'Filipino',
                    'guardian' => '',
                    'guardian_number' => '',
                ]
            ],
            [
                [
                    'school_id' => '1',
                    'first_name' => 'Shan',
                    'middle_name' => '',
                    'last_name' => 'Padayhag',
                    'address_line_1' => '',
                    'address_line_2' => '',
                    'city' => 'Cagayan de Oro City',
                    'province' => '',
                    'sex' => 'male',
                    'nationality' => 'Filipino',
                    'guardian' => '',
                    'guardian_number' => '',
                ]
            ],
            [
                [
                    'school_id' => '1',
                    'first_name' => 'Shan',
                    'middle_name' => '',
                    'last_name' => 'Padayhag',
                    'address_line_1' => '',
                    'address_line_2' => '',
                    'city' => 'Cagayan de Oro City',
                    'province' => 'Misamis Oriental',
                    'sex' => 'males',
                    'nationality' => 'Filipino',
                    'guardian' => '',
                    'guardian_number' => '',
                ]
            ],
        ];
    }
}
