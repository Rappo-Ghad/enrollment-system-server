<?php

namespace Tests\Unit\Repositories\AcademicTerm;

use App\Exceptions\ValidatorFailedException;
use App\Models\AcademicTerm;
use App\Repositories\AcademicTerm\AcademicTermRepositoryInterface;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AcademicTermRepositoryTest extends TestCase
{
    use RefreshDatabase;

    private AcademicTermRepositoryInterface $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(AcademicTermRepositoryInterface::class);
    }

    /**
     * @test
     */
    public function it_should_instantiate_correct_concrete_repository_instance()
    {
        $this->assertInstanceOf(AcademicTermRepositoryInterface::class, $this->repository);
    }

    /**
     * @test
     * @dataProvider validAcademicTermDataProvider
     */
    public function it_should_create_academic_term_if_not_exist(array $academicTermData)
    {
        $academicTerm = $this->repository->createAcademicTermIfNotExist($academicTermData);

        $this->assertDatabaseHas('academic_terms', [
            'id' => 1,
            'term' => $academicTermData['term']
        ]);
        $this->assertInstanceOf(AcademicTerm::class, $academicTerm);
        $this->assertEquals(1, $academicTerm->id);
        $this->assertEquals($academicTermData['term'], $academicTerm->term);
    }

    /**
     * @test
     * @dataProvider validAcademicTermDataProvider
     */
    public function it_should_get_academic_term_if_already_exist(array $academicTermData)
    {
        $this->repository->createAcademicTermIfNotExist($academicTermData);

        $academicTerm = $this->repository->createAcademicTermIfNotExist($academicTermData);

        $this->assertDatabaseMissing('academic_terms', ['id' => 2]);
        $this->assertDatabaseHas('academic_terms', [
            'id' => 1,
            'term' => $academicTermData['term']
        ]);
        $this->assertInstanceOf(AcademicTerm::class, $academicTerm);
        $this->assertEquals(1, $academicTerm->id);
        $this->assertEquals($academicTermData['term'], $academicTerm->term);
    }

    /**
     * @test
     * @dataProvider invalidAcademicTermDataProvider
     */
    public function it_should_throw_exception_when_given_invalid_academic_term(array $academicTermData)
    {
        $thrownException = false;

        try {
            $this->repository->createAcademicTermIfNotExist($academicTermData);
        } catch (ValidatorFailedException $exception) {
            $this->assertInstanceOf(ValidatorFailedException::class, $exception);
            $this->assertEquals('Failed creating academic term', $exception->getMessage());
            $this->assertEquals(400, $exception->getStatusCode());

            $thrownException = true;
        }

        $this->assertTrue($thrownException);
    }

    /**
     * @test
     * @dataProvider validAcademicTermDataProvider
     */
    public function it_should_get_all_academic_terms(array $academicTermData)
    {
        $this->repository->createAcademicTermIfNotExist($academicTermData);

        $academicTerms = $this->repository->getAllAcademicTerms();
        $academicTerm = $academicTerms[0];

        $this->assertDatabaseHas('academic_terms', [
            'id' => 1,
            'term' => $academicTermData['term']
        ]);
        $this->assertInstanceOf(Collection::class, $academicTerms);
        $this->assertInstanceOf(AcademicTerm::class, $academicTerm);
        $this->assertEquals(1, $academicTerm->id);
        $this->assertEquals($academicTermData['term'], $academicTerm->term);
    }

    /**
     * @test
     * @dataProvider validAcademicTermDataProvider
     */
    public function it_should_get_academic_term(array $academicTermData)
    {
        $this->repository->createAcademicTermIfNotExist($academicTermData);

        $academicTerm = $this->repository->getAcademicTerm(1);
        $this->assertInstanceOf(AcademicTerm::class, $academicTerm);
        $this->assertEquals(1, $academicTerm->id);
        $this->assertEquals($academicTermData['term'], $academicTerm->term);
    }
}
