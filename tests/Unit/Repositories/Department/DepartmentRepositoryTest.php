<?php

namespace Tests\Unit\Repositories\Department;

use App\Exceptions\ValidatorFailedException;
use App\Models\Department;
use App\Repositories\Department\DepartmentRepositoryInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class DepartmentRepositoryTest extends TestCase
{
    use RefreshDatabase;

    private DepartmentRepositoryInterface $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(DepartmentRepositoryInterface::class);
    }

    /**
     * @test
     */
    public function it_should_instantiate_correct_concrete_repository_instance()
    {
        $this->assertInstanceOf(DepartmentRepositoryInterface::class, $this->repository);
    }

    /**
     * @test
     * @dataProvider departmentDataProvider
     */
    public function it_should_create_department_if_not_exist(array $departmentData)
    {
        $department = $this->repository->addDepartmentIfNotExist($departmentData);

        $this->assertDatabaseHas('departments', [
            'id' => 1,
            'name' => $departmentData['name']
        ]);
        $this->assertInstanceOf(Department::class, $department);
        $this->assertEquals(1, $department->id);
        $this->assertEquals($departmentData['name'], $department->name);
    }

    /**
     * @test
     * @dataProvider departmentDataProvider
     */
    public function it_should_get_department_if_already_exist(array $departmentData)
    {
        $this->repository->addDepartmentIfNotExist($departmentData);

        $department = $this->repository->addDepartmentIfNotExist($departmentData);

        $this->assertDatabaseMissing('departments', ['id' => 2]);
        $this->assertDatabaseHas('departments', [
            'id' => 1,
            'name' => $departmentData['name'],
        ]);
        $this->assertInstanceOf(Department::class, $department);
        $this->assertEquals(1, $department->id);
        $this->assertEquals($departmentData['name'], $department->name);
    }

    /**
     * @test
     * @dataProvider invalidDepartmentDataProvider
     */
    public function it_should_throw_exception_when_given_invalid_department(array $departmentData)
    {
        $thrownException = false;

        try {
            $this->repository->addDepartmentIfNotExist($departmentData);
        } catch (ValidatorFailedException $exception) {
            $this->assertInstanceOf(ValidatorFailedException::class, $exception);
            $this->assertEquals('Failed creating department', $exception->getMessage());
            $this->assertEquals(400, $exception->getStatusCode());


            $thrownException = true;
        }

        $this->assertTrue($thrownException);
    }
}
