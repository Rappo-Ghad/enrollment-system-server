<?php

namespace Repositories\AcademicYear;

use App\Repositories\AcademicYear\AcademicYearRepositoryInterface;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Illuminate\Support\Facades\Log;

class AcademicYearRepositoryTest extends TestCase
{
    use RefreshDatabase;

    private AcademicYearRepositoryInterface $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(AcademicYearRepositoryInterface::class);

        $knownDate = Carbon::create(2022, 5, 2);
        Carbon::setTestNow($knownDate->addDay());
    }

    /**
     * @test
     * @dataProvider academicYearProvider
     */
    public function it_should_create_an_academic_year_entry(array $academicYearData)
    {
        $academicYear = $this->repository->createIfNotExistAcademicYear();

        $this->assertDatabaseHas('academic_years', [
            'id' => 1,
            'scope' => $academicYearData['scope']
        ]);
        $this->assertEquals($academicYearData['scope'], $academicYear->scope);
    }

    /**
     * @test
     * @dataProvider academicYearProvider
     */
    public function it_should_get_an_academic_year_if_already_exist(array $academicYearData)
    {
        $this->repository->createIfNotExistAcademicYear();

        $newKnownDate = $academicYearData['currentDate'];
        Carbon::setTestNow($newKnownDate);

        $retrievedAcademicYear = $this->repository->createIfNotExistAcademicYear();

        $this->assertDatabaseMissing('academic_years', [ 'id' => 2]);
        $this->assertDatabaseHas('academic_years', [
            'id' => 1,
            'scope' => $academicYearData['scope']
        ]);
        $this->assertEquals($academicYearData['scope'], $retrievedAcademicYear->scope);
    }

    /**
     * @test
     */
    public function it_should_get_the_current_academic_year()
    {
        $this->repository->createIfNotExistAcademicYear();
        $scope = '2022-2023';

        $academicYear = $this->repository->getCurrentAcademicYear();

        $this->assertDatabaseHas('academic_years', [
            'id' => 1,
            'scope' => $scope
        ]);
        $this->assertEquals($scope, $academicYear->scope);
    }

    /**
     * @test
     */
    public  function it_should_throw_an_exception_when_there_is_no_academic_year()
    {
        $hasThrownException = false;

        try {
            $this->repository->getCurrentAcademicYear();
        } catch (ModelNotFoundException $exception) {
            $this->assertInstanceOf(ModelNotFoundException::class, $exception);

            $hasThrownException = true;
        }

        $this->assertTrue($hasThrownException);
    }

    public function academicYearProvider(): array
    {
        $scope = date('Y') . '-' . date('Y', strtotime('+1 year'));

        return [
            [
                [
                    'scope' => $scope,
                    'currentDate' => Carbon::now()->addDay()
                ]
            ],
            [
                [
                    'scope' => $scope,
                    'currentDate' => Carbon::now()->addWeek()
                ]
            ],
            [
                [
                    'scope' => $scope,
                    'currentDate' => Carbon::now()->addMonth()
                ]
            ],
            [
                [
                    'scope' => $scope,
                    'currentDate' => Carbon::now()->addMonths(7)
                ]
            ],
        ];
    }
}
