<?php

namespace Tests\Feature;

use App\Http\Resources\AuthenticatedUserResource as AuthenticatedUser;
use App\Models\Department;
use App\Repositories\Program\ProgramRepositoryInterface;
use App\Repositories\User\UserRepositoryInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProgramControllerTest extends TestCase
{
    use RefreshDatabase;

    private AuthenticatedUser $auth;

    private ProgramRepositoryInterface $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(ProgramRepositoryInterface::class);
        $userRepository = resolve(UserRepositoryInterface::class);

        $userData = [
            'username' => 'Shan',
            'password' => 'testpass',
            'first_name' => 'Shan',
            'middle_name' => '',
            'last_name' => 'Padayhag'
        ];
        $userRepository->createUser($userData);
        $this->auth = $userRepository->authenticateUser($userData);

        $departmentData = [
            'name' => 'College of Computer Studies'
        ];
        Department::create($departmentData);
    }

    /**
     * @test
     * @dataProvider validProgramDataProvider
     */
    public function it_can_create_program_if_not_exist(array $programData)
    {
        $response = $this->post('/api/v1/program', $programData, [
            'accept' => 'application/json',
            'authorization' => "Bearer {$this->auth->accessToken}"
        ]);

        $response->assertStatus(201);
        $response->assertJsonStructure([
            "id",
            "department_id",
            "name",
            "created_at",
            "updated_at",
        ]);
    }

    /**
     * @test
     * @dataProvider validProgramDataProvider
     */
    public function it_can_retrieve_program_if_exist(array $programData)
    {
        $this->repository->addProgramIfNotExist($programData);

        $response = $this->post('/api/v1/program', $programData, [
            'accept' => 'application/json',
            'authorization' => "Bearer {$this->auth->accessToken}"
        ]);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "id",
            "department_id",
            "name",
            "created_at",
            "updated_at",
            'deleted_at',
        ]);
    }

    /**
     * @test
     * @dataProvider invalidProgramDataProvider
     */
    public function it_should_respond_with_error_when_invalid_program_is_provided(
        array $programData,
        int $statusCode
    ) {
        $response = $this->post('/api/v1/program', $programData, [
            'accept' => 'application/json',
            'authorization' => "Bearer {$this->auth->accessToken}"
        ]);

        $response->assertStatus($statusCode);
    }
}
