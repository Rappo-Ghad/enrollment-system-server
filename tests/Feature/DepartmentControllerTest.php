<?php

namespace Tests\Feature;

use App\Http\Resources\AuthenticatedUserResource as AuthenticatedUser;
use App\Repositories\Department\DepartmentRepositoryInterface;
use App\Repositories\User\UserRepositoryInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class DepartmentControllerTest extends TestCase
{
    use RefreshDatabase;

    private AuthenticatedUser $auth;

    private DepartmentRepositoryInterface $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = resolve(DepartmentRepositoryInterface::class);
        $userRepository = resolve(UserRepositoryInterface::class);

        $userData = [
            'username' => 'Shan',
            'password' => 'testpass',
            'first_name' => 'Shan',
            'middle_name' => '',
            'last_name' => 'Padayhag'
        ];
        $userRepository->createUser($userData);
        $this->auth = $userRepository->authenticateUser($userData);
    }

    /**
     * @test
     * @dataProvider departmentDataProvider
     */
    public function it_can_create_department_if_not_exist(array $departmentData)
    {
        $response = $this->post('/api/v1/department', $departmentData, [
            'accept' => 'application/json',
            'authorization' => "Bearer {$this->auth->accessToken}"
        ]);

        $response->assertStatus(201);
        $response->assertJsonStructure([
            "id",
            "name",
            "created_at",
            "updated_at",
        ]);
    }

    /**
     * @test
     * @dataProvider departmentDataProvider
     */
    public function it_can_retrieve_department_if_exist(array $departmentData)
    {
        $this->repository->addDepartmentIfNotExist($departmentData);

        $response = $this->post('/api/v1/department', $departmentData, [
            'accept' => 'application/json',
            'authorization' => "Bearer {$this->auth->accessToken}"
        ]);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "id",
            "name",
            "created_at",
            "updated_at",
            'deleted_at',
        ]);
    }

    /**
     * @test
     * @dataProvider invalidDepartmentDataProvider
     */
    public function it_should_respond_with_error_when_given_invalid_department(array $departmentData)
    {
        $response = $this->post('/api/v1/department', $departmentData, [
            'accept' => 'application/json',
            'authorization' => "Bearer {$this->auth->accessToken}"
        ]);

        $response->assertStatus(400);
    }
}
